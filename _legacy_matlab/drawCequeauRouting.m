function drawCequeauRouting(CPgrid, downstreamCPs, fast)
    %DRAWCEQUEAUROUTING Draws routing from each CEQUEAU CP to the next
    %   Draws a quiver plot of arrows showing which CP drains into the next.
    %   Requires a raster containing all CPs (CPgrid) and a list of downstream
    %   CPs (for exampl, the 'idCPAval' vector in
    %   CEQUEAUstructure.bassinVersant.carreauxPartiels).
    %
    %   drawCequeauRouting(CPgrid,downstreamCPs,fast)
    %
    %   Input:  'CPgrid'        - Raster image of CPs (generated by CEQUEAU_physiography.m function - see /physiography folder)
    %           'downstreamCPs' - Vector of downstream CPs (eg. idCPAval vector in CEQUEAU structure)
    %           'fast'          - Binary switch (either 0 or 1).  If fast == 1, function will create faster (but less accurate) quiver plot. If fast == 0, positions of arrows will be more accurate (starts, ends correspond to largest chunks of CPs.
    %
    %   By Stephen Dugdale, 2015-04-01

    %get centroids of CPs
    h = waitbar(0, 'Getting CP centroids...');

    for n = 1:size(downstreamCPs, 1)

        %extract CP from CPgrid
        [row col] = find(CPgrid == n);
        CP = CPgrid(min(row):max(row), min(col):max(col));

        if fast == 1 %if fast mode selected (less accurate arrows)
            CP = CP == n; %get Nth CP
            STATS = regionprops(CP, 'Area', 'Centroid'); %get area and centroid of CP
            idx = find([STATS.Area] == max([STATS.Area])); %get largest object
            centroid(n, :) = STATS(idx).Centroid; %centroid equals centroid of largest object
        else
            CP = bwlabel(CP == n); %get Nth CP and label it
            STATS = regionprops(CP, 'Area'); %get area of CP
            idx = find([STATS.Area] == max([STATS.Area])); %get largest object
            CP = CP == idx; %select only the largest object
            CP = imfill(CP, 'holes'); %fill holes in object (can sometimes exist in 8-connected neighbourhoods)
            CP = bwmorph(CP, 'shrink', inf); %do ultimate shrinkage to shrink CP to a point
            [centroid(n, 2), centroid(n, 1)] = find(CP); %find the location of that point
        end

        centroid(n, 1) = centroid(n, 1) + min(col) - 1; %add CE location to CP centroid
        centroid(n, 2) = centroid(n, 2) + min(row) - 1; %add CE location to CE centroid
        waitbar(n / size(downstreamCPs, 1)); %update waitbar
    end

    close(h);

    CPgrid = int16(CPgrid); %convert grid to signed integer so that zeros can be transformed to negative 1000
    %CPgrid(CPgrid==0)=-1000; %transform zeros to negative 1000 so that positive values (CPs) are more clearly visible
    figure, imagesc(CPgrid); %show CPgrid
    cmap = jet(max(double(CPgrid(:))));
    cmap(1, :) = zeros(1, 3);
    colormap(cmap);
    axis equal
    hold on

    for n = 2:size(downstreamCPs); %create direction vectors for quiver plot
        xa(n - 1, :) = [centroid(n, 1); centroid(downstreamCPs(n), 1)];
        ya(n - 1, :) = [centroid(n, 2); centroid(downstreamCPs(n), 2)];
        ua(n - 1, 1) = xa(n - 1, 2) - xa(n - 1, 1);
        va(n - 1, 1) = ya(n - 1, 2) - ya(n - 1, 1);
    end

    quiver(xa(:, 1), ya(:, 1), ua, va, 'w'); %superimpose quiver plot on CPgrid to show flow directions
